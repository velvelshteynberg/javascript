Parameters are the names for the things that you then go and pass in the argument e.g. paramater is name argument is 'max', 'velvel'

You can have a function in an object. This is called a method. 

AddeventListener is a method attached to an object

Actually functions really are objects in essence console.dir(function) will give you an entire object in the console.

Functions can be stored in variables. e.g. const name = function(){}

Expressions yield returns for you

An anonymous function is one where it doesnt have a name
e.g. const name = function (parameter) {
    console.log(parameter)
}
This is an anonymous function because it doesnt have a name. Anonymous functions are not neccesarily linked to variables. Sometimes you need them if you will not need to reuse the code ever. 


Function declaration/statement is naming the function and not assigning to a variable. THe function gets hoisted to the top and can be used script-wide even if definition has been set after being called. 

Function Expressions (assigning the function to a constant). The constant is hoisted but is set to undefined until the actual definition is ran so therefore the funciton will HAVE TO BE defined before execution 

adding names to functions is always good because this way if you get an error you can see which funciton the browser doesn't like

There are arrow function name = (parameter) => {}. These arrow functions have to be named. If you have no arguments you still have to put ()
Advantages: 1- if they have only one expression then you can emit the {} and the return key word
2- if you have one argument you can have a syntax of arg => {...} and if you have one expression then (a) => a otherwise you have to have {} and the return key word

You can set default arguments for function calls function Name (argument1, argument2 = defaultArgument2)
if you pass an undefined value as an argument the default value will be used. Null and 0 will be kept though and the default will not work
You can have paramater with defaults as the first/second in the parameter list and it doesn't matter

The rest operator allows you to have a flexible amount of parameters in your function. function name (...number) {
 etc...
}
rest operator has to be the last argument and cant have an argument afterwards. you also cant have 2 different rest operators. ES6 feature
If you build a function with the function key word then you have the option of not doing ...numbers in the arguments list and instead ommiting that and doing the follow for (const num of arguments(this is a js keyword = arraylike object))
you can have functions within functions: will be block scoped
callback functions are those functions that are not called by you but are called by the browser e.g. click event listeneer


.bind() is not immediately executed and it must take 2 arguments (this, your argument). All future arguments will be appended as parameters after your argument
.bind() is used where you want to 'pre configure' a functions argueemtns, when youre not calling the function on your own. 

.apply() and .call() get immediately executed

